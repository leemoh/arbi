import mock
import datetime
from unittest2 import TestCase
from arbi.tools.oh.reader.price_sensor import PriceSensor

class PriceSensorTest(TestCase):

    def setUp(self):
        self.sensor = PriceSensor()

    def test_find(self):
        price_vol = 0.1
        time_period = 5
        price_ts_list = [
            ('2016-05-26 16:12:47', [1464279167.0, [1.97, 1.97]]),
            ('2016-05-26 16:12:48', [1464279168.0, [1.98, 1.96]]),
            ('2016-05-26 16:12:49', [1464279169.0, [1.99, 1.95]]),
            ('2016-05-26 16:13:27', [1464279207.0, [2.00, 1.94]]),
            ('2016-05-26 16:13:37', [1464279217.0, [2.01, 1.93]]),
            ('2016-05-26 16:13:38', [1464279218.0, [2.03, 1.91]]),
            ('2016-05-26 16:13:39', [1464279219.0, [2.05, 1.89]]),
            ('2016-05-26 16:13:40', [1464279220.0, [2.07, 1.87]]),
            ('2016-05-26 16:13:41', [1464279221.0, [2.10, 1.84]]),
            ('2016-05-26 16:13:42', [1464279222.0, [2.12, 1.82]]),
            ('2016-05-26 16:13:43', [1464279223.0, [2.13, 1.81]]),
            ('2016-05-26 16:13:44', [1464279224.0, [2.14, 1.80]]),
            ('2016-05-26 16:13:48', [1464279228.0, [2.16, 1.78]]),
            ('2016-05-26 16:13:58', [1464279238.0, [2.17, 1.77]]),
            ('2016-05-26 16:14:43', [1464279283.0, [2.20, 1.74]]),
            ('2016-05-26 16:13:47', [1464279287.0, [2.21, 1.73]]),
        ]

        expected = [
            [5, 0.11, '2016-05-26 16:13:37', '2016-05-26 16:13:42', 2.01, 2.12],
            [5, 0.1, '2016-05-26 16:13:38', '2016-05-26 16:13:43', 2.03, 2.13],
        ]

        res = self.sensor.find(price_ts_list, price_vol, time_period, [])

        self.assertEqual(res, expected)

    def test_find_with_scores(self):
        price_vol = 0.1
        time_period = 5
        price_ts_list = [
            ('2016-05-26 16:12:47', [1464279167.0, [1.97, 1.97]]),
            ('2016-05-26 16:12:48', [1464279168.0, [1.98, 1.96]]),
            ('2016-05-26 16:12:49', [1464279169.0, [1.99, 1.95]]),
            ('2016-05-26 16:13:27', [1464279207.0, [2.00, 1.94]]),
            ('2016-05-26 16:13:37', [1464279217.0, [2.01, 1.93]]),
            ('2016-05-26 16:13:38', [1464279218.0, [2.03, 1.91]]),
            ('2016-05-26 16:13:39', [1464279219.0, [2.05, 1.89]]),
            ('2016-05-26 16:13:40', [1464279220.0, [2.07, 1.87]]),
            ('2016-05-26 16:13:41', [1464279221.0, [2.10, 1.84]]),
            ('2016-05-26 16:13:42', [1464279222.0, [2.12, 1.82]]),
            ('2016-05-26 16:13:43', [1464279223.0, [2.13, 1.81]]),
            ('2016-05-26 16:13:44', [1464279224.0, [2.14, 1.80]]),
            ('2016-05-26 16:13:48', [1464279228.0, [2.16, 1.78]]),
            ('2016-05-26 16:13:58', [1464279238.0, [2.17, 1.77]]),
            ('2016-05-26 16:14:43', [1464279283.0, [2.20, 1.74]]),
            ('2016-05-26 16:13:47', [1464279287.0, [2.21, 1.73]]),
        ]
        scores_ts = [1464279220.5]

        res = self.sensor.find(price_ts_list, price_vol, time_period, scores_ts)

        self.assertEqual(res, [])

    def test_find_simple(self):
        price_vol = 0.1
        time_period = 5
        price_ts_list = [
            ('2016-05-26 16:12:47', [1464279167.0, [2.1, 1.82]]),
            ('2016-05-26 16:12:50', [1464279170.0, [2.0, 1.92]]),
        ]
        expected = [
            [3, 0.1, '2016-05-26 16:12:47', '2016-05-26 16:12:50', 2.1, 2.0],
        ]

        res = self.sensor.find(price_ts_list, price_vol, time_period, [])

        self.assertEqual(res, expected)

    def test_find_ignore_zero(self):
        price_vol = 0.1
        time_period = 5
        price_ts_list = [
            ('2016-05-26 16:12:47', [1464279167.0, [0, 0]]),
            ('2016-05-26 16:12:50', [1464279170.0, [2.0, 1.92]]),
        ]

        res = self.sensor.find(price_ts_list, price_vol, time_period, [])

        self.assertEqual(res, [])
