import mock
from unittest import TestCase

from arbi.strats import cross_handicap_tg_prices, cross_handicap_hcp_prices
from arbi.strats.cross_handicap_arbi import CrossHandicapArbiStrategy


profit_threshold = 0.01
mock_bookie_id_map = {'b1': 'b1', 'b2': 'b2', 'b3': 'b3', 'b4': 'b4', 'b5': 'b5'}


@mock.patch('arbi.constants.BOOKIE_ID_MAP', return_value=mock_bookie_id_map)
class CrossHandicapArbiStrategyTest(TestCase):
    def setUp(self):
        self.match1 = mock.MagicMock(is_in_running=False)
        self.match1.info = {'home_team_score': -1, 'away_team_score': -1}
        self.match1.odds.odds_dict = {
            ('FT', 'AH'): {
                -1: {'b1': ([1.65, 2.45], 'a!A1', 123.45),
                     'b2': ([1.66, 2.35], 'b!A2', 456.78),
                     'b3': ([1.67, 2.3], 'c!A3', 789.65),
                     },
                -0.75: {'b1': ([1.35, 2.70], 'a!A1', 123.45),
                        'b2': ([1.50, 2.65], 'b!A2', 456.78),
                        'b3': ([1.45, 2.50], 'c!A3', 789.65),
                        },
                -1.25: {'b1': ([1.95, 2.09], 'a!A1', 123.45),
                        'b2': ([1.99, 1.92], 'b!A2', 456.78),
                        'b3': ([2.00, 1.97], 'c!A3', 789.65),
                        },
            },
            ('FT', 'OU'): {
                2: {'b1': ([1.65, 2.45], 'a!A1', 123.45),
                    'b2': ([1.66, 2.35], 'b!A2', 456.78),
                    'b3': ([1.67, 2.3], 'c!A3', 789.65),
                    },
                1.75: {'b1': ([1.35, 2.70], 'a!A1', 123.45),
                       'b2': ([1.50, 2.65], 'b!A2', 456.78),
                       'b3': ([1.45, 2.50], 'c!A3', 789.65),
                       },
                2.25: {'b1': ([1.95, 2.09], 'a!A1', 123.45),
                       'b2': ([1.99, 1.92], 'b!A2', 456.78),
                       'b3': ([2.00, 1.97], 'c!A3', 789.65),
                       },
            },
        }

        self.bookie_availability_dict = {bookie: {flag: True for flag in ['dead ball', 'running ball']}
                                         for bookie in ['b1', 'b2', 'b3', 'b3 lay', '15', '7', '7 lay', '24', '37']}

    def test_normal(self, _):
        strat = CrossHandicapArbiStrategy(profit_threshold)
        arbi_opps = strat.spot_arbi(self.match1, self.bookie_availability_dict)
        expected_arbi_opps = [(0.01313, (('OU Over', 2, 'FT', 'b3', 60.7, 1.67, 'c!A3', False),
                                         ('OU Under', 2.25, 'FT', 'b1', 39.3, 2.09, 'a!A1', False))),
                              (0.01067, (('AH Home', -1, 'FT', 'b3', 60.5, 1.67, 'c!A3', False),
                                         ('AH Away', 1.25, 'FT', 'b1', 39.5, 2.09, 'a!A1', False)))]

        self.assertEqual(arbi_opps, expected_arbi_opps)


class AHvsCrossHCPStrategyMethodTest(TestCase):
    def setUp(self):
        self.strat = CrossHandicapArbiStrategy()
        self.match1 = mock.MagicMock()
        self.match1.info = {'home_team_score': -1, 'away_team_score': -1}
        self.match1.odds.odds_dict = {
            ('FT', 'AH'): {
                -1: {'b1': ([1.65, 2.44], 'a!A1', 123.45),
                     'b2': ([1.66, 2.35], 'b!A2', 456.78),
                     'b3': ([1.67, 2.3], 'c!A3', 789.65),
                     },
                -0.75: {'b1': ([1.35, 2.70], 'a!A1', 123.45),
                        'b2': ([1.50, 2.65], 'b!A2', 456.78),
                        'b3': ([1.45, 2.50], 'c!A3', 789.65),
                        },
                -1.25: {'b1': ([1.95, 2.09], 'a!A1', 123.45),
                        'b2': ([1.99, 1.92], 'b!A2', 456.78),
                        'b3': ([2.00, 1.97], 'c!A3', 789.65),
                        },
            },
            ('FT', 'OU'): {
                2: {'b1': ([1.65, 2.44], 'a!A1', 123.45),
                    'b2': ([1.66, 2.35], 'b!A2', 456.78),
                    'b3': ([1.67, 2.3], 'c!A3', 789.65),
                    },
                1.75: {'b1': ([1.35, 2.70], 'a!A1', 123.45),
                       'b2': ([1.50, 2.65], 'b!A2', 456.78),
                       'b3': ([1.45, 2.50], 'c!A3', 789.65),
                       },
                2.25: {'b1': ([1.95, 2.09], 'a!A1', 123.45),
                       'b2': ([1.99, 1.92], 'b!A2', 456.78),
                       'b3': ([2.00, 1.97], 'c!A3', 789.65),
                       },
            },
        }

        self.bookie_availability_dict = {bookie: {flag: True for flag in ['dead ball', 'running ball']}
                                         for bookie in ['b1', 'b2', 'b3', 'b3 lay', '15', '7', '7 lay', '24', '37']}

    def test_get_top_price(self):
        price_dict = self.match1.odds.odds_dict[('FT', 'AH')]
        result = self.strat.get_top_price(price_dict[-1.25])
        expected = ('b3', 2.00, 'c!A3', 'b1', 2.09, 'a!A1')
        self.assertEqual(result, expected)

    def test_ou_checker(self):
        price_dict = self.match1.odds.odds_dict[('FT', 'OU')]
        result = self.strat.ou_checker(2, price_dict, [])
        expected = ((2, 'OU', 2.25, 2.575729777881186, ['b3', 1.67, 'c!A3'], ['b1', 2.09, 'a!A1']), 1.67)
        self.assertEqual(result, expected)

    def test_hcp_checker(self):
        price_dict = self.match1.odds.odds_dict[('FT', 'AH')]
        result = self.strat.hcp_checker(-1, price_dict, [], 2, 1.67)
        expected = (-1, 'AH', 1.25, 2.5599320461608825, ['b3', 1.67, 'c!A3'], ['b1', 2.09, 'a!A1'])

        self.assertEqual(result, expected)

    def test_hcp_filter(self):
        price_dict = self.match1.odds.odds_dict
        result = self.strat.hcp_filter('FT', price_dict)
        expected = [(2, 'OU', 2.25, 2.575729777881186, ['b3', 1.67, 'c!A3'], ['b1', 2.09, 'a!A1']),
                    (-1, 'AH', 1.25, 2.5599320461608825, ['b3', 1.67, 'c!A3'], ['b1', 2.09, 'a!A1'])]

        self.assertEqual(result, expected)

    ### Test cross_handicap_tg_prices.py ###
    def test_xtg_price_poisson_value(self):
        result = cross_handicap_tg_prices.poisson_value(1, 2.4)
        expected = 0.21772308789459002

        self.assertEqual(result, expected)

    def test_xtg_price_calc_ou_price(self):
        totalIntGoals = 11
        e = abs(2.0) - 1.0
        tmp_sum = 0.0
        ou_working_array = [0.0] * totalIntGoals

        for i in range(0, totalIntGoals):
            if i == (totalIntGoals - 1):
                ou_working_array[i] = 1.0 - tmp_sum
            else:
                ou_working_array[i] = cross_handicap_tg_prices.poisson_value(i, e)
                tmp_sum += ou_working_array[i]

        result = cross_handicap_tg_prices.calc_ou_price(ou_working_array)

        expected = [1.5819767068693265, 1.82082813404913, 2.392211191177333, 3.0883167867659993, 3.784422382354666,
                    5.270932328468338, 10.162466771141455, 11.307775117534137, 12.453083463926816, 19.525586355528556,
                    49.435380480957015, 51.049893163655305, 52.664405846354114, 87.63119769557038, 269.0472406097595,
                    271.1413596770291, 273.2354787442857, 469.4215992427741, 1677.8185986774113, 1680.3983195984772,
                    1682.9780405194497, 2951.5978927872693, 12007.151089105279, 12010.220146146807, 12013.289203152584,
                    21391.802409723994, 97561.50065029362, 97565.06151371286, 97568.62237496584, 175832.65964645537,
                    888720.7315200454, 888724.785887328, 888728.840291603, 1617300.322076051, 8974598.996960735,
                    8974603.539558334, 8974608.091102665, 17949215.180686284], [2.718281828459045, 2.218281828459045,
                                                                                1.718281828459045, 1.4788545523060301,
                                                                                1.3591409142295225, 1.2341409142295225,
                                                                                1.1091409142295225, 1.097014145981798,
                                                                                1.087312731383618, 1.0539793980502847,
                                                                                1.0206460647169513, 1.0199800626293078,
                                                                                1.019355685672142, 1.011543185672142,
                                                                                1.003730685672142, 1.0037017656281717,
                                                                                1.003673290507955, 1.0021348289694936,
                                                                                1.000596367431032, 1.000595451352029,
                                                                                1.000594538083084, 1.0003389143612027,
                                                                                1.0000832906393213, 1.0000832693536992,
                                                                                1.0000832480789539, 1.0000467490644271,
                                                                                1.0000102500499006, 1.0000102496757974,
                                                                                1.0000102493017218, 1.0000056872579262,
                                                                                1.0000011252141305, 1.0000011252089973,
                                                                                1.000001125203864, 1.0000006183147339,
                                                                                1.0000001114256036, 1.0000001114255472,
                                                                                1.0000001114254908, 1.0000000557127453]

        self.assertEqual(result, expected)

    def test_xtg_price_get_prices_to_hedge(self):
        result = cross_handicap_tg_prices.get_prices(2, 1.95, 0, 0, 1)
        expected = {0.5: 1.13624956837118, 0.75: 1.1592617189316488, 2.0: 2.05114177143082, 3.0: 4.8946898857496075,
                    4.0: 13.994848962436036, 5.0: 44.85661474964012, 1.75: 1.7623700323059586, 1.0: 1.19162694524492,
                    8.0: 2757.9117435414432, 9.0: 13312.28738307181, 8.75: 4573.401147460606, 8.25: 2759.593433430253,
                    8.5: 2761.275123320453, 6.5: 161.95736722353348, 6.0: 159.50167674227544, 7.5: 632.829426480385,
                    7.0: 629.9220437084492, 9.75: 26631.219665132423, 5.25: 45.86173813228063, 4.75: 22.872277351771974,
                    1.5: 1.5980676961093714, 1.25: 1.3948473206771457, 9.25: 13314.198607811322,
                    4.25: 14.781979231921484, 3.5: 6.047992915134715, 2.25: 2.4299233694579705, 5.75: 72.14573034594565,
                    2.5: 2.8087049674851214, 6.25: 160.72952198290557, 2.75: 3.4702287407557324,
                    3.25: 5.471341400442161, 9.5: 13316.109832577384, 6.75: 257.31668566905756, 7.25: 631.3757350944584,
                    7.75: 1029.0501687105232, 3.75: 8.271349595671875, 5.5: 46.86686151492152, 4.5: 15.569109501406942}

        self.assertEqual(result, expected)

    def test_xtg_price_get_prices_to_bet(self):
        result = cross_handicap_tg_prices.get_prices(2, 1.95, 0, 1, 0)
        expected = {0.5: 8.339472792131964, 0.75: 7.278972792132025, 2.0: 1.9513464569472816, 3.0: 1.2567598523463777,
                    4.0: 1.0769535685170857, 5.0: 1.0228015774976842, 1.75: 2.311698988187241, 1.0: 6.218472792132087,
                    8.0: 1.0003627247054037, 9.0: 1.0000751242138513, 8.75: 1.0002187034706165,
                    8.25: 1.0003625035816737, 8.5: 1.0003622827273815, 6.5: 1.0062128252794496, 6.0: 1.006309081522374,
                    7.5: 1.0015827056450513, 7.0: 1.00159002218161, 9.75: 1.0000375513237432, 5.25: 1.0222907101158536,
                    4.75: 1.0457199762017002, 1.5: 2.6720515194272005, 1.25: 3.532624504796041,
                    9.25: 1.0000751134291208, 4.25: 1.0725585188580045, 3.5: 1.1980985347665276,
                    2.25: 1.6993381752891148, 5.75: 1.0140556572423602, 2.5: 1.5528817678819287,
                    6.25: 1.0062605834387148, 2.75: 1.404820810114153, 3.25: 1.2236465325374422,
                    9.5: 1.0000751026474866, 6.75: 1.0039014237305297, 7.25: 1.0015863554771032,
                    7.75: 1.0009727151752277, 3.75: 1.1375260516418066, 5.5: 1.0218022329623464, 4.5: 1.068638374905716}

        self.assertEqual(result, expected)

    ### Test cross_handicap_tg_prices.py ###
    def test_xhcp_price_calc_SJD(self):
        result = cross_handicap_hcp_prices.calc_SJD([2, 2.65])
        expected = (2.325, -0.32499999999999996, 2.33, -0.32999999999999996)
        self.assertEqual(result, expected)

    def test_xhcp_price_poisson_value(self):
        result = cross_handicap_hcp_prices.poisson_value(1, 2.4)
        expected = 0.21772308789459002
        self.assertEqual(result, expected)

    def test_xhcp_price_config(self):
        result = cross_handicap_hcp_prices.config([1.0, 0.0, 0.0, 2.65, 0.0, 0.0])
        expected = (1.0, 0.0, 0.0, 1.0, 1.825, 0.825, 1.8299999999999998, 0.82)

        self.assertEqual(result, expected)

    def test_xhcp_price_db_poisson(self):
        result = cross_handicap_hcp_prices.db_poisson(11, 11, 0, [1.825, 0.825, 1.8299999999999998, 0.82])

        expected = [
            [0.07065121306042958, 0.0582872507748544, 0.02404349094462744, 0.0066119600097725465, 0.0013637167520155874,
             0.0002250132640825719, 3.093932381135364e-05, 3.6464203063381073e-06, 3.760370940911173e-07,
             3.447006695835242e-08, 2.8437805240640745e-09],
            [0.128938463835284, 0.1063742326641093, 0.04387937097394508, 0.012066827017834897, 0.0024887830724284474,
             0.00041064920695069374, 5.64642659557204e-05, 6.654717059067046e-06, 6.862676967162891e-07,
             6.290787219899317e-08, 5.189899456416936e-09],
            [0.11765634824969666, 0.09706648730599973, 0.040039926013724886, 0.011010979653774344,
             0.0022710145535909582, 0.00037471740134250805, 5.152364268459486e-05, 6.0724293163986795e-06,
             6.262192732536138e-07, 5.740343338158126e-08, 4.735783253980454e-09],
            [0.07157427851856546, 0.0590487797778165, 0.024357621658349305, 0.006698345956046059, 0.0013815338534344996,
             0.00022795308581669238, 3.1343549299795206e-05, 3.6940611674758633e-06, 3.809500578959484e-07,
             3.492042197379526e-08, 2.8809348128381096e-09],
            [0.03265576457409549, 0.026941005773628776, 0.01111316488162187, 0.0030561203424460145,
             0.0006303248206294904, 0.0001040035954038659, 1.4300494368031562e-05, 1.6854154076608626e-06,
             1.7380846391502645e-07, 1.593244252554409e-08, 1.3144265083573874e-09],
            [0.011919354069544853, 0.009833467107374502, 0.004056305181791982, 0.001115483924992795,
             0.00023006855952976396, 3.796131232241105e-05, 5.219680444331519e-06, 6.151766237962147e-07,
             6.344008932898464e-08, 5.815341521823592e-09, 4.797656755504464e-10],
            [0.003625470196153226, 0.002991012911826411, 0.0012337928261283945, 0.0003392930271853085,
             6.997918685696987e-05, 1.1546565831400026e-05, 1.5876528018175037e-06, 1.8711622307134864e-07,
             1.929636050423283e-08, 1.7688330462213425e-09, 1.4592872631326075e-10],
            [0.0009452118725685197, 0.0007797997948690286, 0.0003216674153834743, 8.845853923045544e-05,
             1.8244573716281432e-05, 3.0103546631864357e-06, 4.1392376618813496e-07, 4.878387244360161e-08,
             5.030836845746416e-09, 4.6116004419342144e-10, 3.804570364595727e-11],
            [0.00021562645842969355, 0.00017789182820449715, 7.338037913435507e-05, 2.0179604261947646e-05,
             4.162043379026701e-06, 6.867371575394055e-07, 9.442635916166828e-08, 1.1128820901196617e-08,
             1.1476596554359012e-09, 1.0520213508162426e-10, 8.679176144234002e-12],
            [4.372425407046563e-05, 3.6072509608134144e-05, 1.4879910213355331e-05, 4.091975308672717e-06,
             8.439699074137477e-07, 1.3925503472326833e-07, 1.91475672744494e-08, 2.2566775716315362e-09,
             2.3271987457450216e-10, 2.133265516932936e-11, 1.7599440514696725e-12],
            [7.979676367859979e-06, 6.583233003484481e-06, 2.7155836139373483e-06, 7.467854938327708e-07,
             1.5402450810300897e-07, 2.5414043836996473e-08, 3.4944310275870154e-09, 4.118436568227554e-10,
             4.247137710984665e-11, 3.893209568402609e-12, 3.211897893932153e-13]]

        self.assertEqual(result, expected)

    def test_xhcp_price_db_poisson_delta(self):
        result = cross_handicap_hcp_prices.db_poisson(11, 11, 1, [1.825, 0.825, 1.8299999999999998, 0.82])
        expected = [
            [0.07065121306042961, 0.057933994709552274, 0.02375293783091643, 0.006492469673783824, 0.001330956283125684,
             0.0002182768304326121, 2.9831166825790323e-05, 3.4945081138782947e-06, 3.5818708167252527e-07,
             3.263482299683007e-08, 2.6760554857400657e-09],
            [0.12929171990058616, 0.10601921031848065, 0.04346787623057706, 0.011881219503024395, 0.0024356499981200014,
             0.0003994465996916801, 5.459103529119628e-05, 6.394949848397279e-06, 6.554823594607211e-07,
             5.972172608419901e-08, 4.89718153890432e-09],
            [0.11830192370903635, 0.0970075774414098, 0.03977310675097801, 0.01087131584526732, 0.0022286197482798012,
             0.0003654936387178873, 4.99507972914446e-05, 5.85137911128351e-06, 5.997663589065599e-07,
             5.46453793670421e-08, 4.480921108097452e-09],
            [0.07216417346251217, 0.05917462223925997, 0.024261595118096585, 0.006631502665613066,
             0.0013594580464506786, 0.0002229511196179112, 3.04699863477812e-05, 3.5693412578829407e-06,
             3.658574789330015e-07, 3.333368141389568e-08, 2.733361875939446e-09],
            [0.033015109359099314, 0.027072389674461433, 0.011099679766529187, 0.003033912469517977,
             0.0006219520562511854, 0.00010200013722519437, 1.3940018754109899e-05, 1.6329736254814453e-06,
             1.6737979661184817e-07, 1.5250159246857272e-08, 1.2505130582422965e-09],
            [0.012083530025430346, 0.009908494620852883, 0.004062482794549682, 0.0011104119638435796,
             0.00022763445258793384, 3.733205022442113e-05, 5.102046864004223e-06, 5.976683469262089e-07,
             6.126100555993642e-08, 5.581558284349761e-09, 4.576877793166804e-10],
            [0.0036854766577562557, 0.0030220908593601293, 0.001239057252337653, 0.00033867564897229174,
             6.942850803931981e-05, 1.1386275318448447e-05, 1.556124293521288e-06, 1.8228884581249372e-07,
             1.8684606695780608e-08, 1.702375276726677e-09, 1.3959477269158753e-10],
            [0.0009634888976705638, 0.0007900608960898622, 0.0003239249673968435, 8.853949108847055e-05,
             1.8150595673136465e-05, 2.976697690394379e-06, 4.068153510205652e-07, 4.765551254812335e-08,
             4.8846900361826436e-09, 4.450495366299741e-10, 3.649406200365788e-11],
            [0.00022039808534214146, 0.000180726429980556, 7.409783629202796e-05, 2.0253408586487636e-05,
             4.151948760229966e-06, 6.809195966777142e-07, 9.305901154595428e-08, 1.0901198495383215e-08,
             1.1173728457767797e-09, 1.0180508150410657e-10, 8.348016683336738e-12],
            [4.4814277352902094e-05, 3.674770742937972e-05, 1.5066560046045683e-05, 4.118193079252486e-06,
             8.442295812467597e-07, 1.3845365132446855e-07, 1.892199901434404e-08, 2.216577027394587e-09,
             2.271991453079452e-10, 2.070036657250167e-11, 1.6974300589451368e-12],
            [8.201012755581081e-06, 6.724830459576486e-06, 2.7571804884263595e-06, 7.536293335032048e-07,
             1.54494013368157e-07, 2.533701819237774e-08, 3.462725819624958e-09, 4.0563359601320936e-10,
             4.1577443591353964e-11, 3.788167082767804e-12, 3.1062970078695995e-13]]

        self.assertEqual(result, expected)

    def test_xhcp_price_map_non_poisson_adjustments(self):
        result = cross_handicap_hcp_prices.map_non_poisson_adjustments(0.5, 1)
        expected = 0.010147442684195642

        self.assertEqual(result, expected)

    def test_xhcp_price_map_jolly_win_generics(self):
        result = cross_handicap_hcp_prices.map_jolly_win_generics(0.5, 1)
        expected = 0.273

        self.assertEqual(result, expected)

    def test_xhcp_price_map_jolly_win_wb12(self):
        result = cross_handicap_hcp_prices.map_jolly_win_wb12(0.5, 1)
        expected = 0.246

        self.assertEqual(result, expected)

    def test_xhcp_price_calc_hcp_price(self):
        result = cross_handicap_hcp_prices.calc_hcp_price(0, 0.5, 0.3, 0.2, 0.4, 0.15)
        expected = 1.4

        self.assertEqual(result, expected)

    def test_xhcp_price_calc_ou_price(self):
        totalIntGoals = 11
        e = 1.0
        tmp_sum = 0.0
        ou_working_array = [0.0] * totalIntGoals
        for i in range(0, totalIntGoals):
            if i == (totalIntGoals - 1):
                ou_working_array[i] = 1.0 - tmp_sum
            else:
                ou_working_array[i] = cross_handicap_tg_prices.poisson_value(i, e)
                tmp_sum += ou_working_array[i]

        result = cross_handicap_hcp_prices.calc_ou_price(ou_working_array)
        expected = ([3.784422382354666, 5.270932328468338, 10.162466771141455, 11.307775117534137, 12.453083463926816,
                     19.525586355528556, 49.435380480957015, 51.049893163655305, 52.664405846354114, 87.63119769557038,
                     269.0472406097595],
                    [1.3591409142295225, 1.2341409142295225, 1.1091409142295225, 1.097014145981798, 1.087312731383618,
                     1.0539793980502847, 1.0206460647169513, 1.0199800626293078, 1.019355685672142, 1.011543185672142,
                     1.003730685672142])

        self.assertEqual(result, expected)

    def test_xhcp_price_calc_expG(self):
        result = cross_handicap_hcp_prices.calc_expG(2.5, 1.90)
        expected = 2.569999999999827
        self.assertEqual(result, expected)

    def test_xhcp_price_get_prices(self):
        result = cross_handicap_hcp_prices.get_prices(-1, 1.95, 2.25, 2.00, 0, 0, 1)
        expected = {0.0: 5.797990081984012, 0.25: 3.5781086111175773, 2.0: 1.3037638695713576, 1.25: 1.7768413071237075,
                    1.0: 2.052615944631654, 1.75: 1.4596662405919723, 2.5: 1.2315618017195813, 0.75: 2.4076107614353788,
                    1.5: 1.615568611612587, 2.25: 1.2627937074851283, 0.5: 2.7626055782391035}

        self.assertEqual(result, expected)
